package com.example.walkerdine.glassdrive;

import com.ford.syncV4.exception.SyncException;
import com.ford.syncV4.proxy.RPCRequest;
import com.ford.syncV4.proxy.RPCRequestFactory;
import com.ford.syncV4.proxy.rpc.GetVehicleData;
import com.ford.syncV4.proxy.rpc.SubscribeVehicleData;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.example.walkerdine.glassdrive.applink.AppLinkService;

import com.ford.syncV4.proxy.SyncProxyALM;

//import com.android.glass.touchpad.GestureDetector;

import android.app.AlarmManager;
import android.content.Intent;
import android.bluetooth.BluetoothAdapter;
import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Looper;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.util.logging.LogRecord;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class Drive extends Activity {
    public static final String TAG = "Drive";

    private TextView sampleTextView;

    private static Activity currentUIActivity;


    static {
        instance = null;
    }

    public static synchronized void setCurrentActivity(Activity act) {
        currentUIActivity = act;
    }

    public static synchronized Activity getCurrentActivity() {
        return currentUIActivity;
    }


    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private TextView textView;
    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);


        Drive.setInstance(this);

        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.layout);

        textView = ((TextView)findViewById(R.id.timestamp));
        AlarmManager alarmMgr = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

        final Handler handler = new Handler(Looper.getMainLooper());

                Drive.getInstance().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        textView.setText("Drive with Glass");
                        //Log.i("Drive", "" + textView.getText());
                        counter--;
                    }
                });
        startSyncProxyService();
    }
    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    public void updateSpeed(final Double speed) {
        Drive.getInstance().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                textView.setText("Speed: " + speed);
            }
        });
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            getMenuInflater().inflate(R.menu.menu, menu);
            return true;
            //Log.i(TAG, "VOICE");
        }

        return super.onCreatePanelMenu(featureId, menu);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }

    int autoIncCorrId = 0;

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            switch (item.getItemId()) {
                case R.id.show_speed:
                    //Build Request and send to proxy object:
                    int corrId = autoIncCorrId++;
                    SubscribeVehicleData msg = new SubscribeVehicleData();

                    //Location functional group
                    msg.setSpeed(true);
                    msg.setGps(false);

                    //VechicleInfo functional group
                    msg.setFuelLevel(false);
                    msg.setFuelLevel_State(false);
                    msg.setInstantFuelConsumption(false);
                    msg.setExternalTemperature(false);
                    msg.setTirePressure(false);
                    msg.setOdometer(false);

                    //DrivingCharacteristics functional group
                    msg.setBeltStatus(false);
                    msg.setDriverBraking(false);
                    msg.setPrndl(false);
                    msg.setRpm(false);
                    try {
                        AppLinkService.getInstance().getProxy().sendRPCRequest(msg);
                    } catch (SyncException e) {
                        e.printStackTrace();
                    }
                    // handle top-level dogs menu item
                    break;
                case R.id.pause_menu_item:
                    // handle top-level cats menu item
                    break;
            }
            return true;
        }
        // Good practice to pass through to super if not handled
        return super.onMenuItemSelected(featureId, item);
    }

    int counter = 500;

    /**
     * Builds a Glass styled "Drive with Glass" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        counter++;
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText("Drive with Glass" + counter);
        return card.getView();
    }



    public void startSyncProxyService() {
        // Get the local Bluetooth adapter
        BluetoothAdapter mBtAdapter = BluetoothAdapter.getDefaultAdapter();

        // If BT adapter exists, is enabled, and there are paired devices, start service/proxy
        if (mBtAdapter != null)
        {
            if ((mBtAdapter.isEnabled() && mBtAdapter.getBondedDevices().isEmpty() == false))
            {
                Intent startIntent = new Intent(this, AppLinkService.class);
                startService(startIntent);
            }
        }
    }

    // Recycle the proxy
    public void endSyncProxyInstance() {
        AppLinkService serviceInstance = AppLinkService.getInstance();
        if (serviceInstance != null){
            SyncProxyALM proxyInstance = serviceInstance.getProxy();
            // if proxy exists, reset it
            if(proxyInstance != null){
                serviceInstance.reset();
                // if proxy == null create proxy
            } else {
                serviceInstance.startProxy();
            }
        }
    }

    // Stop the AppLinkService
    public void endSyncProxyService() {
        AppLinkService serviceInstance = AppLinkService.getInstance();
        if (serviceInstance != null){
            serviceInstance.stopService();
        }
    }

    static Drive instance = null;

    private static synchronized void setInstance(Drive app) {
        instance = app;
    }

    public static synchronized Drive getInstance() {
        return instance;
    }

}
